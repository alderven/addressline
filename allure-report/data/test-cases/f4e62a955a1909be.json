{
  "uid" : "f4e62a955a1909be",
  "name" : "test_addressline[test_data6]",
  "fullName" : "test_Functionality.test_addressline[test_data6]",
  "historyId" : "83bd15ba068f33b1705996e269be737",
  "time" : {
    "start" : 1507125398454,
    "stop" : 1507125398458,
    "duration" : 4
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusDetails" : {
    "message" : "AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nassert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\n  Extra items in the left set:\n  'Broadway Av'\n  Extra items in the right set:\n  'Broadway'\n  'Av'\n  Use -v to get the full diff",
    "trace" : "test_data = ['200 Broadway Av', 'Broadway Av', '200']\n\n    @pytest.allure.feature('Addressline')\n    @pytest.allure.story('General functionality')\n    @pytest.allure.severity(pytest.allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('test_data', get_test_data())\n    def test_addressline(test_data):\n        input_str = test_data[0]\n        expected_result = {test_data[1], test_data[2]}\n        actual_result = addressline(input_str)\n        msg = 'Input string: \"{}\". Expected result: {}. Actual result: {}'.format(input_str, expected_result, actual_result)\n        with pytest.allure.step(msg):\n>           assert expected_result == actual_result, msg\nE           AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nE           assert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\nE             Extra items in the left set:\nE             'Broadway Av'\nE             Extra items in the right set:\nE             'Broadway'\nE             'Av'\nE             Use -v to get the full diff\n\ntest_Functionality.py:28: AssertionError",
    "flaky" : false
  },
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusDetails" : {
      "message" : "AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nassert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\n  Extra items in the left set:\n  'Broadway Av'\n  Extra items in the right set:\n  'Broadway'\n  'Av'\n  Use -v to get the full diff",
      "trace" : "test_data = ['200 Broadway Av', 'Broadway Av', '200']\n\n    @pytest.allure.feature('Addressline')\n    @pytest.allure.story('General functionality')\n    @pytest.allure.severity(pytest.allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('test_data', get_test_data())\n    def test_addressline(test_data):\n        input_str = test_data[0]\n        expected_result = {test_data[1], test_data[2]}\n        actual_result = addressline(input_str)\n        msg = 'Input string: \"{}\". Expected result: {}. Actual result: {}'.format(input_str, expected_result, actual_result)\n        with pytest.allure.step(msg):\n>           assert expected_result == actual_result, msg\nE           AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nE           assert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\nE             Extra items in the left set:\nE             'Broadway Av'\nE             Extra items in the right set:\nE             'Broadway'\nE             'Av'\nE             Use -v to get the full diff\n\ntest_Functionality.py:28: AssertionError",
      "flaky" : false
    },
    "steps" : [ {
      "name" : "Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}",
      "time" : {
        "start" : 1507125398455,
        "stop" : 1507125398455,
        "duration" : 0
      },
      "status" : "failed",
      "statusDetails" : {
        "message" : "AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nassert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\n  Extra items in the left set:\n  'Broadway Av'\n  Extra items in the right set:\n  'Broadway'\n  'Av'\n  Use -v to get the full diff",
        "trace" : "test_data = ['200 Broadway Av', 'Broadway Av', '200']\n\n    @pytest.allure.feature('Addressline')\n    @pytest.allure.story('General functionality')\n    @pytest.allure.severity(pytest.allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('test_data', get_test_data())\n    def test_addressline(test_data):\n        input_str = test_data[0]\n        expected_result = {test_data[1], test_data[2]}\n        actual_result = addressline(input_str)\n        msg = 'Input string: \"{}\". Expected result: {}. Actual result: {}'.format(input_str, expected_result, actual_result)\n        with pytest.allure.step(msg):\n>           assert expected_result == actual_result, msg\nE           AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nE           assert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\nE             Extra items in the left set:\nE             'Broadway Av'\nE             Extra items in the right set:\nE             'Broadway'\nE             'Av'\nE             Use -v to get the full diff\n\ntest_Functionality.py:28: AssertionError",
        "flaky" : false
      },
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9895488e1824c221",
      "name" : "Captured stdout call",
      "source" : "9895488e1824c221.txt",
      "type" : "text/plain",
      "size" : 72
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 1,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Addressline"
  }, {
    "name" : "host",
    "value" : "AANANYEV-PC"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "General functionality"
  }, {
    "name" : "thread",
    "value" : "27204-MainThread"
  }, {
    "name" : "suite",
    "value" : "test_Functionality"
  }, {
    "name" : "testClass",
    "value" : "test_Functionality"
  }, {
    "name" : "testMethod",
    "value" : "test_addressline[test_data6]"
  }, {
    "name" : "package",
    "value" : "test_Functionality"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "f4e62a955a1909be.json",
  "statusDetailsSafe" : {
    "message" : "AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nassert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\n  Extra items in the left set:\n  'Broadway Av'\n  Extra items in the right set:\n  'Broadway'\n  'Av'\n  Use -v to get the full diff",
    "trace" : "test_data = ['200 Broadway Av', 'Broadway Av', '200']\n\n    @pytest.allure.feature('Addressline')\n    @pytest.allure.story('General functionality')\n    @pytest.allure.severity(pytest.allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize('test_data', get_test_data())\n    def test_addressline(test_data):\n        input_str = test_data[0]\n        expected_result = {test_data[1], test_data[2]}\n        actual_result = addressline(input_str)\n        msg = 'Input string: \"{}\". Expected result: {}. Actual result: {}'.format(input_str, expected_result, actual_result)\n        with pytest.allure.step(msg):\n>           assert expected_result == actual_result, msg\nE           AssertionError: Input string: \"200 Broadway Av\". Expected result: {'Broadway Av', '200'}. Actual result: {'Broadway', 'Av', '200'}\nE           assert {'200', 'Broadway Av'} == {'200', 'Av', 'Broadway'}\nE             Extra items in the left set:\nE             'Broadway Av'\nE             Extra items in the right set:\nE             'Broadway'\nE             'Av'\nE             Use -v to get the full diff\n\ntest_Functionality.py:28: AssertionError",
    "flaky" : false
  },
  "statusMessage" : {
    "present" : true
  },
  "parameterValues" : [ ]
}